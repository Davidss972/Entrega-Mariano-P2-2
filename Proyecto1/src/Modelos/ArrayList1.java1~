/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modelos;

import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author gokud
 */
public class ArrayList1<E>
{
    private static final int tamañoEstandar = 10;
    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};
    transient Object[] elementData;
    private static final Object[] EMPTY_ELEMENTDATA = {};
    protected transient int modCount = 0;
    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
    int size;
    
    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }    

    public boolean add(E e) 
    {
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        elementData[size++] = e;
        return true;
    }
    private void ensureCapacityInternal(int minCapacity) 
    {
        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) 
        {
            minCapacity = Math.max(tamañoEstandar, minCapacity);
        }

        ensureExplicitCapacity(minCapacity);
    }
    private void ensureCapacity(int minCapacity) 
    {
        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)
            ? 0
            : tamañoEstandar;

        if (minCapacity > minExpand) {
            ensureExplicitCapacity(minCapacity);
        }
    }

    private void ensureExplicitCapacity(int minCapacity) 
    {
        modCount++;

        if (minCapacity - elementData.length > 0)
            grow(minCapacity);
    }
    private void grow(int minCapacity) 
    {
       
        int oldCapacity = elementData.length;
        int newCapacity = oldCapacity + (oldCapacity >> 1);
        if (newCapacity - minCapacity < 0)
            newCapacity = minCapacity;
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        elementData = Arrays.copyOf(elementData, newCapacity);
    }
    private static int hugeCapacity(int minCapacity) 
    {
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
    }
    public boolean remove(Object o) 
    {
        if (o == null) 
        {
            for (int index = 0; index < size; index++)
                if (elementData[index] == null) 
                {
                    fastRemove(index);
                    return true;
                }
        } 
        else
        {
            for (int index = 0; index < size; index++)
                if (o.equals(elementData[index]))
                {
                    fastRemove(index);
                    return true;
                }
        }
        return false;
    }
    private void fastRemove(int index) 
    {
        modCount++;
        int numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData[--size] = null; // clear to let GC do its work
    }
    public boolean contains(Object o)
    {
        return indexOf(o) >= 0;
    }
    public int indexOf(Object o) 
    {
        if (o == null) 
        {
            for (int i = 0; i < size; i++)
                if (elementData[i]==null)
                    return i;
        }
        else
        {
            for (int i = 0; i < size; i++)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
    }
    @SuppressWarnings("unchecked")
    E elementData(int index) {
        return (E) elementData[index];
    }
    public E get(int index) 
    {
        rangeCheck(index);
        return elementData(index);
    }
    private void rangeCheck(int index) 
    {
        if (index >= size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }
    private String outOfBoundsMsg(int index) 
    {
        return "Index: "+index+", Size: "+size;
    }
    
}
